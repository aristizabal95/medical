import yaml
import typer

from .utils import approval_prompt, dict_pretty_print
from .server import Server
from .config import config


class Result:
    def __init__(
        self, result_path: str, benchmark_uid: str, dataset_uid: str, model_uid: str
    ):
        """Creates a new result instance

        Args:
            result_path (str): Location of the reuslts.yaml file.
            benchmark_uid (str): UID of the executed benchmark.
            dataset_uid (str): UID of the dataset used.
            model_uid (str): UID of the model used.
        """
        self.path = result_path
        self.benchmark_uid = benchmark_uid
        self.dataset_uid = dataset_uid
        self.model_uid = model_uid
        self.approved = False

    def request_approval(self) -> bool:
        """Prompts the user for approval concerning uploading the results to the server

        Returns:
            bool: Wether the user gave consent or not
        """
        if self.approved:
            return True

        with open(self.path, "r") as f:
            results = yaml.full_load(f)

        dict_pretty_print(results)
        typer.echo("Above are the results generated by the model")

        self.approved = approval_prompt(
            "Do you approve uploading the presented results to the MLCommons server? [Y/n]"
        )
        return self.approved

    def upload(self):
        """Uploads the results to the server
        """
        server = Server(config["server"])
        server.upload_results(
            self.path, self.benchmark_uid, self.model_uid, self.dataset_uid
        )
